# -*- ruby -*-
# Rakefile: build aeolus config server
#
# Copyright (C) 2011 Red Hat, Inc.
#
# Distributed under the GNU Lesser General Public License v2.1 or later.
# See COPYING for details
#
# Greg Blomquist <gblomqui@redhat.com>

# Rakefile for ruby-rpm -*- ruby -*-
require 'rake'
require 'rake/testtask'
require 'rake/clean'
require 'rake/gempackagetask'

version = '0.4.0'
pkg_name = 'aeolus-configserver'

SPEC_FILE="aeolus-configserver.spec"
CONFIG_RU="src/config.ru"

GENERATED_FILES=[
  [SPEC_FILE,false,nil],
  [CONFIG_RU,true,nil]
]

#
# Package tasks
#

# This FileList explicitly excludes both the spec file and the config.ru
# files, since these both go through variable substitution in the RPM task
# below.  And, rake uses hard links to copy files into the package location,
# which would change both the packaged file and the file in the source tree.
configserver_files = FileList[
  "Rakefile", "COPYING",
  "schema/*.rng",
  "src/**/*.*",
  "conf/*",
  "client/*",
  "configure/**/*",
].exclude(CONFIG_RU).exclude(SPEC_FILE)

spec = Gem::Specification.new do |s|
  s.name = pkg_name
  s.version = version
  s.email = "aeolus-devel@fedorahosted.org"
  s.homepage = "http://aeolusproject.org"
  s.summary = "Aeolus Config Server"
  s.files = configserver_files
  s.required_ruby_version = '>= 1.8.1'
  s.author = "Greg Blomquist"
  s.rubyforge_project = "None"
  s.description = "Aeolus Config Server."
end

p = Rake::GemPackageTask.new(spec) do |pkg|
  pkg.need_tar = true
  pkg.need_zip = false
end

# Allow for generated files
# In this case, we allow for files that replace the "@VERSION@" text with the
# actual package version.  Some generated files are packaged, while others are
# simply used during packaging.
GENERATED_FILES.each do |(source_file,is_packaged,block)|
  # create the file task to generate the file
  if is_packaged
    packaged_name = "#{p.package_name}/#{source_file}"
    dependencies = [p.package_dir_path] + p.package_files
  else
    packaged_name = source_file
    dependencies = [p.package_dir] + p.package_files
  end
  if block != nil
    block.call(source_file, packaged_name, dependencies, p)
  else
    file "#{p.package_dir}/#{packaged_name}" => dependencies do
      system("sed -e 's/@VERSION@/#{version}/' #{source_file} > #{p.package_dir}/#{packaged_name}")
    end
  end

  # make the zip/tar/etc. task depend on the created file task
  [
    [p.need_tar, p.tgz_file],
    [p.need_tar_gz, p.tar_gz_file],
    [p.need_tar_bz2, p.tar_bz2_file],
    [p.need_zip, p.zip_file]
  ].each do |(need, ar_file)|
    if need
      task "#{p.package_dir}/#{ar_file}" => ["#{p.package_dir}/#{packaged_name}"]
    end
  end
end

desc "Build (S)RPMs for #{pkg_name}"
task :rpm => [ :package ] do |t|
  Dir::chdir("pkg") do |dir|
    dir = File::expand_path(".")
    system("which rpmbuild &> /dev/null")
    if $? != 0
      raise "Oops, no rpmbuild command found.  Please install the rpm-build package to run the rpm rake task."
    end
    # set pipefail so that is rpmbuild fails, its status is reported back to the rake task
    puts "Running: set -o pipefail && rpmbuild --define '_sourcedir #{dir}' -ba #{SPEC_FILE} | tee rpmbuild.log 2>&1"
    system("set -o pipefail && rpmbuild --define '_sourcedir #{dir}' -ba #{SPEC_FILE} | tee rpmbuild.log 2>&1")
    rpmbuild_status = $?
    if rpmbuild_status != 0
      raise "rpmbuild failed (exit code: #{rpmbuild_status})"
    end
  end
end
